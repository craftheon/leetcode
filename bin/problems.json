[{"id":"1","slug":"two-sum","title":"Two Sum","difficulty":"Easy","content":"Given an array of integers `nums` and an integer `target`, return _indices of the two numbers such that they add up to `target`_.You may assume that each input would have **_exactly_ one solution**, and you may not use the _same_ element twice.You can return the answer in any order.\n\n**Example 1:**```javascript \n**Input:** nums = \\[2,7,11,15\\], target = 9\n**Output:** \\[0,1\\]\n**Explanation:** Because nums\\[0\\] + nums\\[1\\] == 9, we return \\[0, 1\\].\n```**Example 2:**```javascript \n**Input:** nums = \\[3,2,4\\], target = 6\n**Output:** \\[1,2\\]\n```**Example 3:**```javascript \n**Input:** nums = \\[3,3\\], target = 6\n**Output:** \\[0,1\\]\n```\n\n**Constraints:**\n\n*   `2 <= nums.length <= 104`\n*   `-109 <= nums[i] <= 109`\n*   `-109 <= target <= 109`\n*   **Only one valid answer exists.**\n\n**Follow-up:** Can you come up with an algorithm that is less than `O(n2)` time complexity?","hints":["A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.","So, if we fix one of the numbers, say `x`, we have to scan the entire array to find the next number `y` which is `value - x` where value is the input parameter. Can we change our array somehow so that this search becomes faster?","The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"],"similars":[{"title":"3Sum","slug":"3sum","difficulty":"Medium"},{"title":"4Sum","slug":"4sum","difficulty":"Medium"},{"title":"Two Sum II - Input Array Is Sorted","slug":"two-sum-ii-input-array-is-sorted","difficulty":"Medium"},{"title":"Two Sum III - Data structure design","slug":"two-sum-iii-data-structure-design","difficulty":"Easy"}],"tags":[{"name":"Array","slug":"array"},{"name":"Hash Table","slug":"hash-table"}]},{"id":"15","slug":"3sum","title":"3Sum","difficulty":"Medium","content":"Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.Notice that the solution set must not contain duplicate triplets.\n\n**Example 1:**```javascript \n**Input:** nums = \\[-1,0,1,2,-1,-4\\]\n**Output:** \\[\\[-1,-1,2\\],\\[-1,0,1\\]\\]\n**Explanation:** \nnums\\[0\\] + nums\\[1\\] + nums\\[2\\] = (-1) + 0 + 1 = 0.\nnums\\[1\\] + nums\\[2\\] + nums\\[4\\] = 0 + 1 + (-1) = 0.\nnums\\[0\\] + nums\\[3\\] + nums\\[4\\] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are \\[-1,0,1\\] and \\[-1,-1,2\\].\nNotice that the order of the output and the order of the triplets does not matter.\n```**Example 2:**```javascript \n**Input:** nums = \\[0,1,1\\]\n**Output:** \\[\\]\n**Explanation:** The only possible triplet does not sum up to 0.\n```**Example 3:**```javascript \n**Input:** nums = \\[0,0,0\\]\n**Output:** \\[\\[0,0,0\\]\\]\n**Explanation:** The only possible triplet sums up to 0.\n```\n\n**Constraints:**\n\n*   `3 <= nums.length <= 3000`\n*   `-105 <= nums[i] <= 105`","hints":["So, we essentially need to find three numbers x, y, and z such that they add up to the given value. If we fix one of the numbers say x, we are left with the two-sum problem at hand!","For the two-sum problem, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y, which is value - x where value is the input parameter. Can we change our array somehow so that this search becomes faster?","The second train of thought for two-sum is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"],"similars":[{"title":"Two Sum","slug":"two-sum","difficulty":"Easy"},{"title":"3Sum Closest","slug":"3sum-closest","difficulty":"Medium"},{"title":"4Sum","slug":"4sum","difficulty":"Medium"},{"title":"3Sum Smaller","slug":"3sum-smaller","difficulty":"Medium"}],"tags":[{"name":"Array","slug":"array"},{"name":"Two Pointers","slug":"two-pointers"},{"name":"Sorting","slug":"sorting"}]}]