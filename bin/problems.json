[{"id":"1","slug":"two-sum","title":"Two Sum","difficulty":"Easy","content":"Given an array of integers `nums` and an integer `target`, return _indices of the two numbers such that they add up to `target`_.\n\nYou may assume that each input would have **_exactly_ one solution**, and you may not use the _same_ element twice.\n\nYou can return the answer in any order.\n\n**Example 1:**\n\n```javascript \nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\n```\n\n**Example 2:**\n\n```javascript \nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\n```\n\n**Example 3:**\n\n```javascript \nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\n```\n\n**Constraints:**\n\n*   `2 <= nums.length <= 104`\n*   `-109 <= nums[i] <= 109`\n*   `-109 <= target <= 109`\n*   **Only one valid answer exists.**\n\n**Follow-up:** Can you come up with an algorithm that is less than `O(n2)` time complexity?","hints":["A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.","So, if we fix one of the numbers, say `x`, we have to scan the entire array to find the next number `y` which is `value - x` where value is the input parameter. Can we change our array somehow so that this search becomes faster?","The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"],"similars":[{"title":"3Sum","slug":"3sum","difficulty":"Medium"},{"title":"4Sum","slug":"4sum","difficulty":"Medium"},{"title":"Two Sum II - Input Array Is Sorted","slug":"two-sum-ii-input-array-is-sorted","difficulty":"Medium"},{"title":"Two Sum III - Data structure design","slug":"two-sum-iii-data-structure-design","difficulty":"Easy"}],"tags":[{"name":"Array","slug":"array"},{"name":"Hash Table","slug":"hash-table"}]},{"id":"9","slug":"palindrome-number","title":"Palindrome Number","difficulty":"Easy","content":"Given an integer `x`, return `true` _if_ `x` _is a_ _**palindrome**__, and_ `false` _otherwise_.\n\n**Example 1:**\n\n```javascript \nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.\n\n```\n\n**Example 2:**\n\n```javascript \nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n\n```\n\n**Example 3:**\n\n```javascript \nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\n\n```\n\n**Constraints:**\n\n*   `-231 <= x <= 231 - 1`\n\n**Follow up:** Could you solve it without converting the integer to a string?","hints":["Beware of overflow when you reverse the integer."],"similars":[{"title":"Palindrome Linked List","slug":"palindrome-linked-list","difficulty":"Easy"},{"title":"Find Palindrome With Fixed Length","slug":"find-palindrome-with-fixed-length","difficulty":"Medium"},{"title":"Strictly Palindromic Number","slug":"strictly-palindromic-number","difficulty":"Medium"},{"title":"  Count Symmetric Integers","slug":"count-symmetric-integers","difficulty":"Easy"}],"tags":[{"name":"Math","slug":"math"}]},{"id":"20","slug":"valid-parentheses","title":"Valid Parentheses","difficulty":"Easy","content":"Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.\n\nAn input string is valid if:\n\n1.  Open brackets must be closed by the same type of brackets.\n2.  Open brackets must be closed in the correct order.\n3.  Every close bracket has a corresponding open bracket of the same type.\n\n**Example 1:**\n\n```javascript \nInput: s = \"()\"\nOutput: true\n\n```\n\n**Example 2:**\n\n```javascript \nInput: s = \"()[]{}\"\nOutput: true\n\n```\n\n**Example 3:**\n\n```javascript \nInput: s = \"(]\"\nOutput: false\n\n```\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s` consists of parentheses only `'()[]{}'`.","hints":["Use a stack of characters.","When you encounter an opening bracket, push it to the top of the stack.","When you encounter a closing bracket, check if the top of the stack was the opening for it. If yes, pop it from the stack. Otherwise, return false."],"similars":[{"title":"Generate Parentheses","slug":"generate-parentheses","difficulty":"Medium"},{"title":"Longest Valid Parentheses","slug":"longest-valid-parentheses","difficulty":"Hard"},{"title":"Remove Invalid Parentheses","slug":"remove-invalid-parentheses","difficulty":"Hard"},{"title":"Check If Word Is Valid After Substitutions","slug":"check-if-word-is-valid-after-substitutions","difficulty":"Medium"}],"tags":[{"name":"String","slug":"string"},{"name":"Stack","slug":"stack"}]},{"id":"21","slug":"merge-two-sorted-lists","title":"Merge Two Sorted Lists","difficulty":"Easy","content":"You are given the heads of two sorted linked lists `list1` and `list2`.\n\nMerge the two lists into one **sorted** list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn _the head of the merged linked list_.\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg)\n```javascript \nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\n\n```\n\n**Example 2:**\n\n```javascript \nInput: list1 = [], list2 = []\nOutput: []\n\n```\n\n**Example 3:**\n\n```javascript \nInput: list1 = [], list2 = [0]\nOutput: [0]\n\n```\n\n**Constraints:**\n\n*   The number of nodes in both lists is in the range `[0, 50]`.\n*   `-100 <= Node.val <= 100`\n*   Both `list1` and `list2` are sorted in **non-decreasing** order.","hints":[],"similars":[{"title":"Merge k Sorted Lists","slug":"merge-k-sorted-lists","difficulty":"Hard"},{"title":"Merge Sorted Array","slug":"merge-sorted-array","difficulty":"Easy"},{"title":"Sort List","slug":"sort-list","difficulty":"Medium"},{"title":"Shortest Word Distance II","slug":"shortest-word-distance-ii","difficulty":"Medium"}],"tags":[{"name":"Linked List","slug":"linked-list"},{"name":"Recursion","slug":"recursion"}]},{"id":"121","slug":"best-time-to-buy-and-sell-stock","title":"Best Time to Buy and Sell Stock","difficulty":"Easy","content":"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nYou want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock.\n\nReturn _the maximum profit you can achieve from this transaction_. If you cannot achieve any profit, return `0`.\n\n**Example 1:**\n\n```javascript \nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\n```\n\n**Example 2:**\n\n```javascript \nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n\n```\n\n**Constraints:**\n\n*   `1 <= prices.length <= 105`\n*   `0 <= prices[i] <= 104`","hints":[],"similars":[{"title":"Maximum Subarray","slug":"maximum-subarray","difficulty":"Medium"},{"title":"Best Time to Buy and Sell Stock II","slug":"best-time-to-buy-and-sell-stock-ii","difficulty":"Medium"},{"title":"Best Time to Buy and Sell Stock III","slug":"best-time-to-buy-and-sell-stock-iii","difficulty":"Hard"},{"title":"Best Time to Buy and Sell Stock IV","slug":"best-time-to-buy-and-sell-stock-iv","difficulty":"Hard"}],"tags":[{"name":"Array","slug":"array"},{"name":"Dynamic Programming","slug":"dynamic-programming"}]}]